swagger: '2.0'
info:
  description: Description du service "Infrastructure" projet IOTIA
  version: 1.0.5
  title: Web Service Usager
  contact:
    email: alex.lens@etu.unice.fr
host: webservice.lensalex.fr:3001


paths:
  /Usager/{Prenom}/{Nom}:
    get:
      tags:
      - Usager
      summary: Retourne des informations sur une personne
      description: Retourne le nom, prénom et email d'une personne
      operationId: getInfoPersonne
      produces:
      - application/json
      parameters:
      - name: Prenom
        in: path
        description: Prenom d'une personne
        required: true
        type: string
        format: UTF-8
      - name: Nom
        in: path
        description: Nom d'une personne
        required: true
        type: string
        format: UTF-8
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Personne'
        400:
          description: Requete invalid
  /Usager/ListPromo:
    get:
      tags:
      - Usager
      summary: Affichage les informations d'une promotion
      description: Affichage du nom, l'année, la durée d'une promotion 
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_Liste_Promo'
        400:
          description: Requete invalid
  /Usager/ListPersonne:
    get:
      tags:
      - Usager
      summary: Affichage des informations des personnes
      description: Affichage du nom, du mot de passe ou encore de l'email
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_Liste_Personne'
        400:
          description: Requete invalid
  /Usager/ListTypePersonne:
    get:
      tags:
      - Usager
      summary: Affichage de type de personnes
      description: Affichage de type de personnes avec l'id du type et le libelle
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_Liste_TypePersonne'
        400:
          description: Requete invalid
  /Usager/ListPromo/Simple:
    get:
      tags:
      - Usager
      summary: Affichage de la liste de promo
      description: Affichage de la liste de promo avec l'id et le nom
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_Liste_Promo_Simple'
        400:
          description: Requete invalid
          
  /Usager/Load/{IdUser}:
    get:
      tags:
      - Usager
      summary: Cherche avec son id
      description: Releve les informations principal d un etudiant
      produces:
      - application/json
      parameters:
      - name: IdUser
        in: path
        description: Id Usager
        required: true
        type: integer
        format: UTF-8
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_Load'
        400:
          description: Requete invalid
          
  /Usager/ListSalleEleve/{Id}:
    get:
      tags:
      - Usager
      summary: Retourne les salles pour une élève
      description: Retourne l'id de salle et l'id de l'élève 
      operationId: getInfoSalle
      produces:
      - application/json
      parameters:
      - name: Id
        in: path
        description: Id 
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Personne_ListeSalle'
        400:
          description: Requete invalid
  /Usager/GetIdEleve/{Nom}/{Prenom}/{Email}:
    get:
      tags:
      - Usager
      summary: Retourne l'id d'une personne en fonction de 3 paramètres
      description: Retourne l'id d'une personne en fonction du nom, du prénom et de son email
      operationId: getPersonneId
      produces:
      - application/json
      parameters:
      - name: Nom
        in: path
        description: le nom de la personne
        required: true
        type: string
        format: UTF-8
      - name: Prenom
        in: path
        description: le Prenom de la personne
        required: true
        type: string
        format: UTF-8
      - name: Email
        in: path
        description: l'email de la personne
        required: true
        type: string
        format: UTF-8
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Personne_GetIdPersonne'
        400:
          description: Requete invalid
  /Usager/GetIdEleve/{Ine}:
    get:
      tags:
      - Usager
      summary: Retourne l'id d'une personne en fonction de 1 paramètre
      description: Retourne l'id d'une personne en fonction de l'INE
      operationId: getPersonneId_Ine
      produces:
      - application/json
      parameters:
      - name: Ine
        in: path
        description: l'INE
        required: true
        type: string
        format: UTF-8
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Personne_GetIdPersonne'
        400:
          description: Requete invalid
  /Usager/ListProf:
    get:
      tags:
      - Usager
      summary: Obtenir la liste des professeurs 
      description: Obtenir la liste des professeurs avec l'id, le nom et le prénom.
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_Liste_Prof'
        400:
          description: Requete invalid
  /Usager/List/TauxOccupation/Batiment:
    get:
      tags:
      - Usager
      summary: Obtenir la taux occupation Batiment
      description: Obtenir un suivi sur le taux d occupation sur chaque batiment
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_TauxOccupation_Bat'
        400:
          description: Requete invalid
  /Usager/List/TauxOccupation/Site:
    get:
      tags:
      - Usager
      summary: Obtenir la taux occupation Batiment 
      description: Obtenir un suivi sur le taux d occupation sur chaque site
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne_TauxOccupation_Site'
        400:
          description: Requete invalid
  
definitions:
  Personne_TauxOccupation_Bat:
    type: object
    properties:
        id_pers_type:
          type: integer
          format: int64
        libelle:
          type: string
          example: "un libelle"
  Personne_TauxOccupation_Site:
    type: object
    properties:
        id_pers_type:
          type: integer
          format: int64
        libelle:
          type: string
          example: "un libelle"
  Personne:
    type: object
    required:
    - nom
    - prenom
    - email
    properties:
      id:
        type: integer
        format: int64
      nom:
        type: string
        example: Cola
      prenom:
        type: string
        example: "Clément"
      email:
        type: string
        example: unePersonne@iotia.com
  Personne_GetIdPersonne:
    type: object
    required:
    - id_personne
    properties:
      id_personne:
        type: integer
        format: int64
  Personne_Liste_Prof:
    type: object
    required:
    - id_professeur
    - nom
    - prenom
    properties:
      id_professeur:
        type: integer
        format: int64
      nom:
        type: string
        example: Canva
      prenom:
        type: string
        example: Julie
  Personne_Liste_Promo_Simple:
    type: object
    required:
    - id_professeur
    - nom
    properties:
      id_professeur:
        type: integer
        format: int64
      nom:
        type: string
        example: Canva
  Personne_ListeSalle:
    type: object
    required:
    - id_personne
    - id_salle
    properties:
      id_personne:
        type: integer
        format: int64
      id_salle:
        type: integer
        format: int64
  Personne_Liste_Promo:
    type: object
    required:
    - nom
    - annee
    - duree
    properties:
      id:
        type: integer
        format: int64
      nom:
        type: string
        example: "IOTIA"
      annee:
        type: string
        example: 2021-01-01 01:00:00
      duree:
        type: integer
        example: 1
        
  Personne_Load:
    type: object
    required:
    - num_ref
    - email
    - telephone
    - sexe
    - nom
    - prenom
    - date_anniversaire
    - rfid
    - libelle
    - description
    properties:
      num_ref:
        type: integer
        format: int64
      email:
        type: string
        example: "unePersonne@iotia.com"
      telephone:
        type: string 
        example: 06 11 74 56 94
      sexe:
        type: string 
        example: homme 
      nom:
        type: string 
        example: Mainpon 
      prenom:
        type: string 
        example: Charles 
      date_anniversaire:
        type: string 
        example: 2000-01-01 01:00:00 
      rfid:
        type: string 
      libelle:
        type: string 
      description:
        type: string 
        
  Personne_Liste_TypePersonne:
    type: object
    required:
    - libelle
    properties:
      id_pers_type:
        type: integer
        format: int64
      libelle:
        type: string
        example: "un libelle"
  Personne_Liste_Personne:
    type: object
    required:
    - num_ref
    - password
    - email
    - telephone
    - sexe
    - nom
    - prenom
    - date_anniversaire
    - rfid
    - libelle
    - description
    properties:
      num_ref:
        type: integer
        format: int64
      password:
        type: string
      email:
        type: string
        example: "unePersonne@iotia.com"
      telephone:
        type: string 
        example: 06 11 74 56 94
      sexe:
        type: string 
        example: homme 
      nom:
        type: string 
        example: Mainpon 
      prenom:
        type: string 
        example: Charles 
      date_anniversaire:
        type: string 
        example: 2000-01-01 01:00:00 
      rfid:
        type: string 
      libelle:
        type: string 
      description:
        type: string 
# basePath: /thibaud-iotia/Covid/1.0.0
schemes:
 - http
# Added by API Auto Mocking Plugin
# basePath: /thibaud-iotia/Usager/1.0.0
# Added by API Auto Mocking Plugin